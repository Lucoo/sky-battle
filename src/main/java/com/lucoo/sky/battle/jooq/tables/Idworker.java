/*
 * This file is generated by jOOQ.
*/
package com.lucoo.sky.battle.jooq.tables;


import com.lucoo.sky.battle.jooq.ConfigRepository;
import com.lucoo.sky.battle.jooq.Keys;
import com.lucoo.sky.battle.jooq.tables.records.IdworkerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Idworker extends TableImpl<IdworkerRecord> {

    private static final long serialVersionUID = -1372323015;

    /**
     * The reference instance of <code>config-repository.idworker</code>
     */
    public static final Idworker IDWORKER = new Idworker();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdworkerRecord> getRecordType() {
        return IdworkerRecord.class;
    }

    /**
     * The column <code>config-repository.idworker.id</code>.
     */
    public final TableField<IdworkerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>config-repository.idworker.application_name</code>.
     */
    public final TableField<IdworkerRecord, String> APPLICATION_NAME = createField("application_name", org.jooq.impl.SQLDataType.VARCHAR.length(30), this, "");

    /**
     * The column <code>config-repository.idworker.ip</code>.
     */
    public final TableField<IdworkerRecord, String> IP = createField("ip", org.jooq.impl.SQLDataType.VARCHAR.length(20), this, "");

    /**
     * The column <code>config-repository.idworker.port</code>.
     */
    public final TableField<IdworkerRecord, String> PORT = createField("port", org.jooq.impl.SQLDataType.VARCHAR.length(10), this, "");

    /**
     * The column <code>config-repository.idworker.datacenter_id</code>.
     */
    public final TableField<IdworkerRecord, Integer> DATACENTER_ID = createField("datacenter_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>config-repository.idworker.worker_id</code>.
     */
    public final TableField<IdworkerRecord, Integer> WORKER_ID = createField("worker_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>config-repository.idworker.status</code>. 0:未使用  1:正常使用
     */
    public final TableField<IdworkerRecord, Byte> STATUS = createField("status", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "0:未使用  1:正常使用");

    /**
     * Create a <code>config-repository.idworker</code> table reference
     */
    public Idworker() {
        this("idworker", null);
    }

    /**
     * Create an aliased <code>config-repository.idworker</code> table reference
     */
    public Idworker(String alias) {
        this(alias, IDWORKER);
    }

    private Idworker(String alias, Table<IdworkerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Idworker(String alias, Table<IdworkerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ConfigRepository.CONFIG_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<IdworkerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_IDWORKER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<IdworkerRecord> getPrimaryKey() {
        return Keys.KEY_IDWORKER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<IdworkerRecord>> getKeys() {
        return Arrays.<UniqueKey<IdworkerRecord>>asList(Keys.KEY_IDWORKER_PRIMARY, Keys.KEY_IDWORKER_IDWORKER_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Idworker as(String alias) {
        return new Idworker(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Idworker rename(String name) {
        return new Idworker(name, null);
    }
}
