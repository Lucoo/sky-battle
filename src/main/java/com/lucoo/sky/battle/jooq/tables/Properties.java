/*
 * This file is generated by jOOQ.
*/
package com.lucoo.sky.battle.jooq.tables;


import com.lucoo.sky.battle.jooq.ConfigRepository;
import com.lucoo.sky.battle.jooq.Keys;
import com.lucoo.sky.battle.jooq.tables.records.PropertiesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Properties extends TableImpl<PropertiesRecord> {

    private static final long serialVersionUID = 339767045;

    /**
     * The reference instance of <code>config-repository.properties</code>
     */
    public static final Properties PROPERTIES = new Properties();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PropertiesRecord> getRecordType() {
        return PropertiesRecord.class;
    }

    /**
     * The column <code>config-repository.properties.ID</code>. 编号
     */
    public final TableField<PropertiesRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "编号");

    /**
     * The column <code>config-repository.properties.application_id</code>.
     */
    public final TableField<PropertiesRecord, Integer> APPLICATION_ID = createField("application_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>config-repository.properties.profile_id</code>.
     */
    public final TableField<PropertiesRecord, Integer> PROFILE_ID = createField("profile_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>config-repository.properties.key</code>.
     */
    public final TableField<PropertiesRecord, String> KEY = createField("key", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>config-repository.properties.raw_value</code>.
     */
    public final TableField<PropertiesRecord, String> RAW_VALUE = createField("raw_value", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * The column <code>config-repository.properties.application_name</code>.
     */
    public final TableField<PropertiesRecord, String> APPLICATION_NAME = createField("application_name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>config-repository.properties.profile_name</code>.
     */
    public final TableField<PropertiesRecord, String> PROFILE_NAME = createField("profile_name", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

    /**
     * Create a <code>config-repository.properties</code> table reference
     */
    public Properties() {
        this("properties", null);
    }

    /**
     * Create an aliased <code>config-repository.properties</code> table reference
     */
    public Properties(String alias) {
        this(alias, PROPERTIES);
    }

    private Properties(String alias, Table<PropertiesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Properties(String alias, Table<PropertiesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ConfigRepository.CONFIG_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PropertiesRecord, Long> getIdentity() {
        return Keys.IDENTITY_PROPERTIES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PropertiesRecord> getPrimaryKey() {
        return Keys.KEY_PROPERTIES_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PropertiesRecord>> getKeys() {
        return Arrays.<UniqueKey<PropertiesRecord>>asList(Keys.KEY_PROPERTIES_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Properties as(String alias) {
        return new Properties(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Properties rename(String name) {
        return new Properties(name, null);
    }
}
